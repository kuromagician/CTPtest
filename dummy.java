/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'dummy'
 * message type.
 */

public class dummy extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 23;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 238;

    /** Create a new dummy of size 23. */
    public dummy() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new dummy of the given data_length. */
    public dummy(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummy with the given data_length
     * and base offset.
     */
    public dummy(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummy using the given byte array
     * as backing store.
     */
    public dummy(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummy using the given byte array
     * as backing store, with the given base offset.
     */
    public dummy(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummy using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public dummy(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummy embedded in the given message
     * at the given base offset.
     */
    public dummy(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new dummy embedded in the given message
     * at the given base offset and length.
     */
    public dummy(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <dummy> \n";
      try {
        s += "  [options=0x"+Long.toHexString(get_options())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [thl=0x"+Long.toHexString(get_thl())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [etx=0x"+Long.toHexString(get_etx())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [origin=0x"+Long.toHexString(get_origin())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [originSeqNo=0x"+Long.toHexString(get_originSeqNo())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [type=0x"+Long.toHexString(get_type())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [source=0x"+Long.toHexString(get_source())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seqno=0x"+Long.toHexString(get_seqno())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [parent=0x"+Long.toHexString(get_parent())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [metric=0x"+Long.toHexString(get_metric())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [data=0x"+Long.toHexString(get_data())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [hopcount=0x"+Long.toHexString(get_hopcount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sendCount=0x"+Long.toHexString(get_sendCount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [sendSuccessCount=0x"+Long.toHexString(get_sendSuccessCount())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: options
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'options' is signed (false).
     */
    public static boolean isSigned_options() {
        return false;
    }

    /**
     * Return whether the field 'options' is an array (false).
     */
    public static boolean isArray_options() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'options'
     */
    public static int offset_options() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'options'
     */
    public static int offsetBits_options() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'options'
     */
    public short get_options() {
        return (short)getUIntBEElement(offsetBits_options(), 8);
    }

    /**
     * Set the value of the field 'options'
     */
    public void set_options(short value) {
        setUIntBEElement(offsetBits_options(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'options'
     */
    public static int size_options() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'options'
     */
    public static int sizeBits_options() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: thl
    //   Field type: short, unsigned
    //   Offset (bits): 8
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'thl' is signed (false).
     */
    public static boolean isSigned_thl() {
        return false;
    }

    /**
     * Return whether the field 'thl' is an array (false).
     */
    public static boolean isArray_thl() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'thl'
     */
    public static int offset_thl() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'thl'
     */
    public static int offsetBits_thl() {
        return 8;
    }

    /**
     * Return the value (as a short) of the field 'thl'
     */
    public short get_thl() {
        return (short)getUIntBEElement(offsetBits_thl(), 8);
    }

    /**
     * Set the value of the field 'thl'
     */
    public void set_thl(short value) {
        setUIntBEElement(offsetBits_thl(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'thl'
     */
    public static int size_thl() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'thl'
     */
    public static int sizeBits_thl() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: etx
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'etx' is signed (false).
     */
    public static boolean isSigned_etx() {
        return false;
    }

    /**
     * Return whether the field 'etx' is an array (false).
     */
    public static boolean isArray_etx() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'etx'
     */
    public static int offset_etx() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'etx'
     */
    public static int offsetBits_etx() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'etx'
     */
    public int get_etx() {
        return (int)getUIntBEElement(offsetBits_etx(), 16);
    }

    /**
     * Set the value of the field 'etx'
     */
    public void set_etx(int value) {
        setUIntBEElement(offsetBits_etx(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'etx'
     */
    public static int size_etx() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'etx'
     */
    public static int sizeBits_etx() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: origin
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'origin' is signed (false).
     */
    public static boolean isSigned_origin() {
        return false;
    }

    /**
     * Return whether the field 'origin' is an array (false).
     */
    public static boolean isArray_origin() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'origin'
     */
    public static int offset_origin() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'origin'
     */
    public static int offsetBits_origin() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'origin'
     */
    public int get_origin() {
        return (int)getUIntBEElement(offsetBits_origin(), 16);
    }

    /**
     * Set the value of the field 'origin'
     */
    public void set_origin(int value) {
        setUIntBEElement(offsetBits_origin(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'origin'
     */
    public static int size_origin() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'origin'
     */
    public static int sizeBits_origin() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: originSeqNo
    //   Field type: short, unsigned
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'originSeqNo' is signed (false).
     */
    public static boolean isSigned_originSeqNo() {
        return false;
    }

    /**
     * Return whether the field 'originSeqNo' is an array (false).
     */
    public static boolean isArray_originSeqNo() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'originSeqNo'
     */
    public static int offset_originSeqNo() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'originSeqNo'
     */
    public static int offsetBits_originSeqNo() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'originSeqNo'
     */
    public short get_originSeqNo() {
        return (short)getUIntBEElement(offsetBits_originSeqNo(), 8);
    }

    /**
     * Set the value of the field 'originSeqNo'
     */
    public void set_originSeqNo(short value) {
        setUIntBEElement(offsetBits_originSeqNo(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'originSeqNo'
     */
    public static int size_originSeqNo() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'originSeqNo'
     */
    public static int sizeBits_originSeqNo() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: type
    //   Field type: short, unsigned
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'type' is signed (false).
     */
    public static boolean isSigned_type() {
        return false;
    }

    /**
     * Return whether the field 'type' is an array (false).
     */
    public static boolean isArray_type() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'type'
     */
    public static int offset_type() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'type'
     */
    public static int offsetBits_type() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'type'
     */
    public short get_type() {
        return (short)getUIntBEElement(offsetBits_type(), 8);
    }

    /**
     * Set the value of the field 'type'
     */
    public void set_type(short value) {
        setUIntBEElement(offsetBits_type(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'type'
     */
    public static int size_type() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'type'
     */
    public static int sizeBits_type() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source' is signed (false).
     */
    public static boolean isSigned_source() {
        return false;
    }

    /**
     * Return whether the field 'source' is an array (false).
     */
    public static boolean isArray_source() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source'
     */
    public static int offset_source() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source'
     */
    public static int offsetBits_source() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'source'
     */
    public int get_source() {
        return (int)getUIntBEElement(offsetBits_source(), 16);
    }

    /**
     * Set the value of the field 'source'
     */
    public void set_source(int value) {
        setUIntBEElement(offsetBits_source(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'source'
     */
    public static int size_source() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source'
     */
    public static int sizeBits_source() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seqno
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seqno' is signed (false).
     */
    public static boolean isSigned_seqno() {
        return false;
    }

    /**
     * Return whether the field 'seqno' is an array (false).
     */
    public static boolean isArray_seqno() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seqno'
     */
    public static int offset_seqno() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seqno'
     */
    public static int offsetBits_seqno() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'seqno'
     */
    public int get_seqno() {
        return (int)getUIntBEElement(offsetBits_seqno(), 16);
    }

    /**
     * Set the value of the field 'seqno'
     */
    public void set_seqno(int value) {
        setUIntBEElement(offsetBits_seqno(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seqno'
     */
    public static int size_seqno() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seqno'
     */
    public static int sizeBits_seqno() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: parent
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'parent' is signed (false).
     */
    public static boolean isSigned_parent() {
        return false;
    }

    /**
     * Return whether the field 'parent' is an array (false).
     */
    public static boolean isArray_parent() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'parent'
     */
    public static int offset_parent() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'parent'
     */
    public static int offsetBits_parent() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'parent'
     */
    public int get_parent() {
        return (int)getUIntBEElement(offsetBits_parent(), 16);
    }

    /**
     * Set the value of the field 'parent'
     */
    public void set_parent(int value) {
        setUIntBEElement(offsetBits_parent(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'parent'
     */
    public static int size_parent() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'parent'
     */
    public static int sizeBits_parent() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: metric
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'metric' is signed (false).
     */
    public static boolean isSigned_metric() {
        return false;
    }

    /**
     * Return whether the field 'metric' is an array (false).
     */
    public static boolean isArray_metric() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'metric'
     */
    public static int offset_metric() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'metric'
     */
    public static int offsetBits_metric() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'metric'
     */
    public int get_metric() {
        return (int)getUIntBEElement(offsetBits_metric(), 16);
    }

    /**
     * Set the value of the field 'metric'
     */
    public void set_metric(int value) {
        setUIntBEElement(offsetBits_metric(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'metric'
     */
    public static int size_metric() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'metric'
     */
    public static int sizeBits_metric() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: data
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'data' is signed (false).
     */
    public static boolean isSigned_data() {
        return false;
    }

    /**
     * Return whether the field 'data' is an array (false).
     */
    public static boolean isArray_data() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'data'
     */
    public static int offset_data() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'data'
     */
    public static int offsetBits_data() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'data'
     */
    public int get_data() {
        return (int)getUIntBEElement(offsetBits_data(), 16);
    }

    /**
     * Set the value of the field 'data'
     */
    public void set_data(int value) {
        setUIntBEElement(offsetBits_data(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'data'
     */
    public static int size_data() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'data'
     */
    public static int sizeBits_data() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: hopcount
    //   Field type: short, unsigned
    //   Offset (bits): 144
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'hopcount' is signed (false).
     */
    public static boolean isSigned_hopcount() {
        return false;
    }

    /**
     * Return whether the field 'hopcount' is an array (false).
     */
    public static boolean isArray_hopcount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'hopcount'
     */
    public static int offset_hopcount() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'hopcount'
     */
    public static int offsetBits_hopcount() {
        return 144;
    }

    /**
     * Return the value (as a short) of the field 'hopcount'
     */
    public short get_hopcount() {
        return (short)getUIntBEElement(offsetBits_hopcount(), 8);
    }

    /**
     * Set the value of the field 'hopcount'
     */
    public void set_hopcount(short value) {
        setUIntBEElement(offsetBits_hopcount(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'hopcount'
     */
    public static int size_hopcount() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'hopcount'
     */
    public static int sizeBits_hopcount() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sendCount
    //   Field type: int, unsigned
    //   Offset (bits): 152
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sendCount' is signed (false).
     */
    public static boolean isSigned_sendCount() {
        return false;
    }

    /**
     * Return whether the field 'sendCount' is an array (false).
     */
    public static boolean isArray_sendCount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sendCount'
     */
    public static int offset_sendCount() {
        return (152 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sendCount'
     */
    public static int offsetBits_sendCount() {
        return 152;
    }

    /**
     * Return the value (as a int) of the field 'sendCount'
     */
    public int get_sendCount() {
        return (int)getUIntBEElement(offsetBits_sendCount(), 16);
    }

    /**
     * Set the value of the field 'sendCount'
     */
    public void set_sendCount(int value) {
        setUIntBEElement(offsetBits_sendCount(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sendCount'
     */
    public static int size_sendCount() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sendCount'
     */
    public static int sizeBits_sendCount() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: sendSuccessCount
    //   Field type: int, unsigned
    //   Offset (bits): 168
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'sendSuccessCount' is signed (false).
     */
    public static boolean isSigned_sendSuccessCount() {
        return false;
    }

    /**
     * Return whether the field 'sendSuccessCount' is an array (false).
     */
    public static boolean isArray_sendSuccessCount() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'sendSuccessCount'
     */
    public static int offset_sendSuccessCount() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'sendSuccessCount'
     */
    public static int offsetBits_sendSuccessCount() {
        return 168;
    }

    /**
     * Return the value (as a int) of the field 'sendSuccessCount'
     */
    public int get_sendSuccessCount() {
        return (int)getUIntBEElement(offsetBits_sendSuccessCount(), 16);
    }

    /**
     * Set the value of the field 'sendSuccessCount'
     */
    public void set_sendSuccessCount(int value) {
        setUIntBEElement(offsetBits_sendSuccessCount(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'sendSuccessCount'
     */
    public static int size_sendSuccessCount() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'sendSuccessCount'
     */
    public static int sizeBits_sendSuccessCount() {
        return 16;
    }

}
